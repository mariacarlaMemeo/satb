function satb_stimdur_test(stimdur,loopflag)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%SAtb FUNCTION satb_stimdur_test: loop through stimulus presentations in order to time the duration with a photodiode/oscilloscope.
% 
% Usage: stimdur_test(stimdur,loopflag)
% 
% where:
%     stimdur = (optional) stimulus duration, in seconds. If not supplied here, it will be read in from trials_list.txt.
%     loopflag = 1 or 'true' provides infinite loop of stimulus displays; press Space-bar, q, Esc, or Return to end the loop.
%                Otherwise, treps variable is set to give 40 reps, then program quits.
% 
%FEATURES
% Aim is to display stimulus using real experiment code to test display duration with photodiode/oscilloscope.
% - Block 1: Run the tune_durations script to get PsychToolbox to display a stim for requested stimulus duration.
% - Block 2: Loop display for 40 trials.
% - Results are written to diary, named with date/time of run.
%
%HOW TO USE THIS PROGRAM
% - Pass stimulus details for target stim (eg faces) and following stim (eg, response winidow) to tune_durations procedure.
% - In block_trials procedure, comment out code so that target stim loop, excluding other trial components (eg, fixation, response window, feedback).
%
% Currently coded for:
% - SOA = 100 ms
% - tune_durations for face stim pres, but not fixation, etc.
% - fixation commented out
% - response window commented out
% - feedback window commented out
% - masking is OFF (in block_trials)
%
%VERSION
% satb_stimdur_test, 7/24/12
% Spencer K. Lynn, spencer.lynn@gmail.com
%
%CHANGE LOG
% 7/31/12 
% - added stimdur as run-time input parameter.
% - added infinite loop to main stim presentation.
% 
%
%USES
% -Signals Approach Toolbox v3
% -Psychophysics Toolbox v3
%
% TO DO
% - add code to send triggers
% - Log data to dat file?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%
%% critical items to get out of way
%%%%%%%%%%%%%%%%%%%%%%%%%

%% Set randomization seed
clear global
try %use try since RandStream is new to ML7.7
    RandStream.setDefaultStream(RandStream('mt19937ar','seed',sum(100*clock)));%reseed the random-number generator for each expt.
catch
    rand('state',sum(100*clock)); % reseed the random-number generator for each expt.
end

% clc; %Clear ML command window.
KbName('UnifyKeyNames')
%%%%%%%%%%%%%%%%%%%%%%%%%
%% experiment-specific settings
%%%%%%%%%%%%%%%%%%%%%%%%%

%% Set the working directories for the experiment
global listfolder datafolder stimdir %locations of stimuli, parameter files
[exptName mypath]=setdir(mfilename); %Get name of the currently running function, set current directory
listfolder='lists/'; %Folder containing stimulus characterization list text files
datafolder='data/'; %Folder containing stimulus characterization list text files
stimdir='stimuli/'; %Folder containing any stimuli not generated by PsychToolbox drawScreen routines.

%% Open dat & diary files
global fdata %used by prep_datafiles and block-trials.
fdata.datafile_prefix = strcat(exptName,'_'); % name of data file to write to (used by fn Initializers)
fdata.datafile_suffix='.dat';
% fdata.formatStr = '%s\t%s\t%s\t%s\t%s\t%i\t%i\t%s\t%s\t%i\t%s\t%s\t%i\t%i\t%i\n';
% fdata.headerstring='PptID\tStudy\tScenario\tStimSet\tBlock\tTrial\tStimulus_value\tStimulus_name\tResponse_code\tBehavior\tOutcome\tPayoff\tRT\tPoints\tStimulus_duration\n'; %column names for datafile

try
    fdata.participantID=datestr(now,30); %may need MLv2012
catch
        fdata.participantID='DateError'
end
fdata.fname=strcat(fdata.datafile_prefix,fdata.participantID,fdata.datafile_suffix);
fdata.path=datafolder; %includes data/ path
fdata.dataout=[];
% fdata=prep_datafiles(fdata) %open dat & diary files prior to rand, init_ptb so can log information to diary
% fprintf(fdata.fptr,fdata.headerstring); %Write column headings to data file
sessionlog=strcat(fdata.path,fdata.datafile_prefix,fdata.participantID,'_diary.txt');
diary(sessionlog);
{exptName fdata.participantID fdata.fname} %log in diary


%%  Set experiment specific parameters
global backwardmaskinfo targetStim_dur %duration-tuning, mask variables
% backwardmaskinfo=readstim('mask_backward_list.txt',0);

global posobjtype negobjtype noobjtype %target stimulus stim-list codes
global posresponse negresponse %behavior-key codes set by set_responseKeys, used in block_trials
global t0 t1 soa %other general parameters
posobjtype='+'; % S+ designator in stim lists
negobjtype='-'; % S- designator in stim lists
noobjtype='0'; %  designator in stim lists
soa=[0.500]; %SOA in seconds, used in main expt blocks as inter-trial, block intervals
set_responseKeys('keys_yesno_list.txt'); %randomly associate response keys with stimulus classes
disp(strcat('Press "',KbName(posresponse),'" for TARGET/S+ and "',KbName(negresponse),'" for FOIL/S- responses')) %prints to screen

colnames='Expt \t Condition \t Scenario \t StimSet \t Block \t Trial \t ObjNum \t ObjName \t ObjType \t Behavior \t Outcome \t Payoff \t RT \t Points \n'; %column names for datafile (used by fn Initializers)
demoflag=0; %gets reset to 1 if subjectID='demo'

if loopflag
    tReps=inf;
else
    tReps=4; %controls number of trials: a loop count passes through trials_list (reps of 10 trials).
end

%% Define and init expt'l CONDITIONS (a global struct)
global conditions
conditions=[]; %Empty any values from prior runs.
conditions.study=exptName;
conditions.ttlPoints=0;
conditions.scenario='test'; %{}'s extract string from cell
conditions.stimset='test_faces1';
conditions %print conditions

%%%%%%%%%%%%%%%%%%%%%%%%%
%% RUN experiment.
%%%%%%%%%%%%%%%%%%%%%%%%%
global w %from init_ptb
init_ptb(1,0); %Start PsychToolBox. flags=hidecursor,pause. Pause=0 since setting a custom "ready" screen in main_inits fn.

trialinfo=read_list(strcat(listfolder,'trials_list.txt')); %Read information about each trial (getsignal xfn, response-code place-holder, duration)
[trialinfo.wptr]=deal(w); %Deal w pointer into all rows of stiminfo struct (creating wptr if necc).
if ~isempty(stimdur)
    [trialinfo.Stimulus_Duration]=deal(stimdur);
end
trialinfo(1) %print to command window.

try
%     show_b1_intructions
%     tune_durations(conditions.scenario,conditions.stimset,trialinfo) %Fine-tune stimulus duration for local computer
    show_b2_intructions(loopflag)    
    signalsTask(conditions.scenario,tReps,conditions.stimset,trialinfo)
    
catch % catch errors
    disp('Error - Experiment stopped.')
    disp('Type control-c [RETURN] cleanup [RETURN] if problems.')
    psychrethrow(psychlasterror);
    cleanup
end % try ... catch %
cleanup %Diary turned off by cleanup.
end %MAIN FN



%%%%%%%%%%%%%%%%%%%%%%%%%
%% EXPERIMENT-SPECIFIC BLOCK DEFNS
%%%%%%%%%%%%%%%%%%%%%%%%%

function tune_durations(scenario,stimuli,target_info) %Fine-tune stimulus durations, write tunings to infos
global conditions stimulus_list stimdir stimfolder listfolder w
global targetStim_dur %show_stim.m will use this to replace duration in stiminfo at each trial.
global condition paramset stimset

paramset=scenario; %set globals for use elsewhere
stimset=stimuli; %set globals for use elsewhere
condition='trials';
set_params(scenario)
stimfolder=strcat(stimdir,stimset,'/'); %set here for use by loadstim calls

stimulus_list=read_list(strcat(listfolder,'stimuli_list.txt')); %Read stimulus names & display properties (name/xfn, position, size, custom params (eg Gabor)).
[stimulus_list.wptr]=deal(w);

fprintf('%s\n %s\n','','Stimuli duration tunings:'); %display info in cmd-window, preceded by a new-line.

%Pass target_info in, for durations supplied as run-time input parameter.
% target_info=read_list(strcat(listfolder,'trials_list.txt')); %Get desired stimulus duration from here.
% [target_info.wptr]=deal(w);

following_info=read_list(strcat(listfolder,'responseWindowScreen_list.txt'));
[following_info.wptr]=deal(w);
[following_info.wptr]=deal(w);

targetStim_dur=tune_stimdur(target_info,following_info); %fetch_signal.m will use this to replace duration in infos at each trial.
end

function signalsTask(scenario,reps,stimuli,trialinfo)
global condition paramset stimset stimdir stimfolder
paramset=scenario; %set globals for use elsewhere
stimset=stimuli; %set globals for use elsewhere
condition='trials';
set_params(scenario)
stimfolder=strcat(stimdir,stimset,'/'); %set here for use by loadstim calls
block_trials('trials_list.txt','keys_yesno_list.txt',reps,trialinfo) %will repeat trial list reps #times.
end

function block_trials(mytriallist,mykeylist,block_repetitions,trialinfo_from_disk)
%% Main experimental trial block.
global fdata Block soa w listfolder feedbackinfo triggerinfo
global backwardmaskinfo targetStim_dur
global stimulus_list stiminfo conditions signal_params %used by get_signal

Block='trials';%must match list file names
master_trialct=0; %track totoal# trials across mini-blocks.
set_keys(mykeylist); %install response key set

%Read in any needed trial components (fixations, stims, response windows, etc).
fixinfo=read_list(strcat(listfolder,'fixation_list.txt')); %Text file describes fixation as any other stimulus
[fixinfo.wptr]=deal(w);

responseWindowScreen=read_list(strcat(listfolder,'responseWindowScreen_list.txt'));
[responseWindowScreen.wptr]=deal(w);

stimulus_list=read_list(strcat(listfolder,'stimuli_list.txt')); %Read the list of target stimuli & display properties. Includes brief stim durations
[stimulus_list.wptr]=deal(w);

%Pass trialinfo_from_disk in, for durations supplied as run-time input parameter.
% trialinfo_from_disk=read_list(strcat(listfolder,mytriallist)); %Read information about each trial (getsignal xfn, response-code place-holder, duration)
% [trialinfo_from_disk.wptr]=deal(w); %Deal w pointer into all rows of stiminfo struct (creating wptr if necc).


feedbackinfo=read_list(strcat(listfolder,'feedback_',Block,'_list.txt')); %Details of feedback after each trial, dependent on decision outcome.
[feedbackinfo.wptr]=deal(w);

% - Here, add code to preload stims into memory as textures for speed.
% - But then need to modify calls to Screen('Close') in show_stim? and get loadstim to expect textures.
% - move "close" to end of fn that calls this fn?
% - generalize to all "stims": fixation, response screen, ratings
for b=1:block_repetitions %Loop through each TRIAL
    stiminfo=trialinfo_from_disk; %refresh stiminfo every round, since it's being modified in memory by fetchsignal
    
    if ~isempty(targetStim_dur)
        try
            [stiminfo.Stimulus_Duration]=deal(targetStim_dur); %If filled (by tuneStimdur.m) then use that for target stim's display duration
            %- this will get moved out of loop, when we create struct for trial_info?
        catch myerr
            disp('Error assigning targetStim_dur in block_trials')
            myerr
        end %try
    end %if
    
    ntrials=length(stiminfo);
    for mytrial=1:ntrials
        rwOpenTime=[];
        master_trialct=master_trialct+1;
        conditions.xtrial=mytrial; %xtrial becomes global (via conditions) and then used by the get_signal xfn over-write trialinfo with correct stimulus details.
        KbWait([], 1); %wait for no key presses
        
% OFF         show_stim(fixinfo(1)); %show fixation cross
        
% t0=tic; %VERBOSE uncomment to have ML measure approx duration (doesn't include processes prior to next flip).
[response startRT endRT]=show_stim(stiminfo(mytrial)); %show main stim
% toc(t0) %VERBOSE uncomment to have ML measure approx duration (doesn't include processes prior to next flip).
       
        
        if isequal(response,'null')
            %- could implement an RT check here
% OFF         [response rwOpenTime endRT]=show_stim(responseWindowScreen(1)); %end stim pres with response window
            Screen('Flip',stiminfo(mytrial).wptr); %REPLACE response window with a flip if not testing response window.
        else
            Screen('Flip',stiminfo(mytrial).wptr); %end stim pres with flip to blank.
        end
        
        %Process response
        responsetime=round(1000*(endRT-startRT));
        [behavior responseCode]=process_response(response);
% OFF         outcome=decision_outcome(responseCode,stiminfo(mytrial));
        outcome='D0'; %D0 is a decision_outcome.m code. EPLACE call to decision_outcome if not testing key presses.
        
        %Deliver payoff
        payoff=response_feedback(outcome);
        points=signal_params.(payoff); %Return Value of Parmeter indexed by payoff.
        conditions.ttlPoints=conditions.ttlPoints+points; %Note: number+NaN=NaN, so can't use NaN as empty point value, use 0 instead.
        feedbackID=strmatch(outcome,[feedbackinfo.Response_Code],'exact'); %Suss feedback screen layout for given outcome for use in show_stim_trigger.
% OFF         [nullresponse payoff_screen_onset nullendRT]=show_stim(feedbackinfo(feedbackID));
        
        %Determine stimulus durtion, accounting for any processes intervening between flips (eg, payoff preparations).
        if isempty(rwOpenTime)
% OFF        actual_stimdur=payoff_screen_onset-startRT;
            actual_stimdur=NaN;
        else
% OFF        actual_stimdur=rwOpenTime-startRT;
            actual_stimdur=NaN;
        end
        
        fdata.dataout={fdata.participantID ...
            conditions.study ...
            conditions.scenario ...
            conditions.stimset ...
            Block ...
            master_trialct ...
            str2double(stimulus_list(conditions.stimID).Line_Number{1}) ...
            stiminfo(mytrial).Stimulus{1} ...
            stiminfo(mytrial).Response_Code{1} ...
            behavior ...
            outcome ...
            payoff ...
            responsetime ...
            conditions.ttlPoints ...
            actual_stimdur};
% OFF         fprintf(fdata.fptr,fdata.formatStr,fdata.dataout{1,:}); %write this trial's data to text file.
         waitSOA(soa,0) %use mean of SOAs
         
         
         %% Check for user-requested break in stim pres loop
         [KeyIsDown, endrt, KeyCode]=KbCheck;
         if KeyCode(KbName('space'))==1
             return;
         elseif KeyCode(KbName('q'))==1
             return;
         elseif KeyCode(KbName('Return'))==1
             return;
         elseif KeyCode(KbName('ESCAPE'))==1
             return;
         end
         

    end %for each trial
end %for each block rept
end %block

function show_b2_intructions(loopflag)
global w posresponse negresponse 
%% Put block2 instructions on screen
line1=70;
nextline=30;
Screen('TextSize', w, 24);
Screen('TextFont',w, 'Arial');
Screen('DrawText', w, 'Ready.', 10, line1, 255);

Screen('DrawText', w, 'To test feedback delivery timings,', 10, (line1+2*nextline), 255);

if posresponse==KbName('/?')
    Screen('DrawText', w, 'put the "Yes" label on the "/?" key and', 10, (line1+3*nextline), 255);
    Screen('DrawText', w, 'put the "No" label on the "z" key.', 10, (line1+4*nextline), 255);
elseif posresponse==KbName('z')
    Screen('DrawText', w, 'put the "Yes" label on the "z" key and', 10, (line1+3*nextline), 255);
    Screen('DrawText', w, 'put the "No" label on the "/?" key.', 10, (line1+4*nextline), 255);
else
    error('Error assinging response keys in main_inits')
    cleanup
end
Screen('DrawText', w, 'Press space-bar to begin Block 2: Loop Stimulus Display.', 10, (line1+6*nextline), 255);

if loopflag
    Screen('DrawText', w, 'Press space-bar, q, esc, or return to end the stimulus display loop.', 10, (line1+8*nextline), 255);
end

Screen('Flip', w); %show text

%% Wait for user response
[KeyIsDown, endrt, KeyCode]=KbCheck;
while KeyCode(KbName('space'))==0 % loop until valid key is pressed
    [KeyIsDown, endrt, KeyCode]=KbCheck; %check for key presses
    WaitSecs(0.001); % Wait 1 ms before checking the keyboard again to prevent overload of the machine at elevated Priority()
end %while key not pressed
Screen('Flip', w); %show empty screen
WaitSecs(0.100); % aesthentic pause before starting
end

function show_b1_intructions
global w
%% Put key-label instructions & READY  on screen
line1=70;
nextline=30;
Screen('TextSize', w, 24);
Screen('TextFont',w, 'Arial');
Screen('DrawText', w, 'Ready.', 10, line1, 255);

Screen('DrawText', w, 'Press space-bar to begin Block 1: Tune Durations.', 10, (line1+5*nextline), 255);
Screen('Flip', w); %show text

%% Wait for user response
[KeyIsDown, endrt, KeyCode]=KbCheck;
while KeyCode(KbName('space'))==0 % loop until valid key is pressed
    [KeyIsDown, endrt, KeyCode]=KbCheck; %check for key presses
    WaitSecs(0.001); % Wait 1 ms before checking the keyboard again to prevent overload of the machine at elevated Priority()
end %while key not pressed
Screen('Flip', w); %show empty screen
WaitSecs(0.100); % aesthentic pause before starting
end

