function satb_demo(participantID)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
% Experiment: "Signals Approach Demonstation"
% An example of how to use the Signals Approach Toolbox.
% 
%FUNCTION satb_demo
% Usage: satb_demo(participantID)
%
% where: participantID = either a number or text string (the latter in single quotes)
%        participantID = 'demo' will run a very brief version.
%
%...for example: satb_demo('demo')
%
%doc satb_demo_help  %<--- Triple-click and press ENTER for more info.
%
%FEATURES
% 
% As a demonstration, this experiment runs two blocks of trials.
% 
% Experimental Aim: Comparision of ability to adapt to high->baseline sensitivity change
% Design: Within-subjects scenario comparision (conservative payoff vs increased similarity)
% - Each ppt runs two experiments (w/in-subject), block 1 is random selection of these scenarios.
% - stims = scowling faces, judged as angry/not angry
% - 500 ms stim duration
% 
% Additional Features:
% - Start time is logged after Introduction instruction block.
% - Ppts are parially informed re parameter values in instructions (pts, not baseline, ~sim)
% - No practice session
% - Infinite response window: "Is this person angry?"
% - Points reset to zero at start of each block
% - tune_durations for target stim pres, but not fixation, etc.
% 
% ...also:
% - backward mask TURNED OFF in block_trials
% - affect ratings TURNED OFF
% - confidence ratings TURNED OFF
%     
%VERSION
%  satb_demo
% Spencer K. Lynn, spencer.lynn@gmail.com
%
%CHANGE LOG
% 20141021 - Forked from sb3 expt
% 
%USES
% -Signals Approach Toolbox v3
% -Psychophysics Toolbox v3


%% Begin Program Code %%%%%%%%%%%%%%%%%%%%%%
clc; %Clear ML command window.

%%%%%%%%%%%%%%%%%%%%%%%%%
%% critical items to get out of way
%%%%%%%%%%%%%%%%%%%%%%%%%

%% Load PTB patch to Mac video driver
% See >> help PsychtoolboxKernelDriver
% See http://tech.groups.yahoo.com/group/psychtoolbox/message/14941
[status,result]=system('uname -m');
if ~isempty(findstr('_64',result))
    try
        v = bitor(2^16, Screen('Preference','ConserveVRAM'));
        Screen('Preference','ConserveVRAM', v);
    end
end

%% Set randomization seed
try %rng requires Matalab 2012 or later.
   rng('shuffle') 
catch rnderr
    rnderr.message
    rand('state',sum(100*clock)); % reseed the random-number generator for each expt.
end

%%%%%%%%%%%%%%%%%%%%%%%%%
%% experiment-specific settings
%%%%%%%%%%%%%%%%%%%%%%%%%

%% Set the working directories for the experiment
global listfolder datafolder stimdir %locations of stimuli, parameter files
[exptName mypath]=setdir(mfilename); %Get name of the currently running function, set current directory
listfolder='lists/'; %Folder containing stimulus characterization list text files
datafolder='data/'; %Folder containing stimulus characterization list text files
stimdir='stimuli/'; %Folder containing any stimuli not generated by PsychToolbox drawScreen routines.

%% Open dat & diary files
global fdata %used by prep_datafiles and block-trials.
fdata.datafile_prefix = strcat([exptName,'_']); % name of data file to write to (used by fn Initializers)
fdata.datafile_suffix='.dat';
fdata.formatStr = '%s\t%s\t%s\t%s\t%s\t%i\t%i\t%s\t%s\t%i\t%s\t%s\t%i\t%i\t%i\n'; 
fdata.headerstring='PptID\tStudy\tScenario\tStimSet\tBlock\tTrial\tStimulus_value\tStimulus_name\tResponse_code\tBehavior\tOutcome\tPayoff\tRT\tPoints\tStimulus_duration\n'; %column names for datafile
fdata.participantID=num2str(participantID); %use num2str in case user enters just a number
fdata.fname=strcat(fdata.datafile_prefix,fdata.participantID,fdata.datafile_suffix);
fdata.path=datafolder; %includes data/ path
fdata.dataout=[];
fdata=prep_datafiles(fdata) %open dat & diary files prior to rand, init_ptb so can log information to diary
fprintf(fdata.fptr,fdata.headerstring); %Write column headings to data file


%%  Set experiment specific parameters
global backwardmaskinfo targetStim_dur %duration-tuning, mask variables
% backwardmaskinfo=readstim('mask_backward_list.txt',0);

global posobjtype negobjtype noobjtype %target stimulus stim-list codes
global posresponse negresponse %behavior-key codes set by set_responseKeys, used in block_trials
global t0 t1 soa %other general parameters
posobjtype='+'; % S+ designator in stim lists
negobjtype='-'; % S- designator in stim lists
noobjtype='0'; %  designator in stim lists
soa=[0.200 0.300 0.400]; %SOA in seconds, used in main expt blocks as inter-trial, block intervals
set_responseKeys('keys_yesno_list.txt'); %randomly associate response keys with stimulus classes
disp(strcat('Press "',KbName(posresponse),'" for TARGET/S+ and "',KbName(negresponse),'" for FOIL/S- responses')) %prints to screen

colnames='Expt \t Condition \t Scenario \t StimSet \t Block \t Trial \t ObjNum \t ObjName \t ObjType \t Behavior \t Outcome \t Payoff \t RT \t Points \n'; %column names for datafile (used by fn Initializers)
demoflag=0; %gets reset to 1 if subjectID='demo'

%Randomize stimulus sets to use
stimulusSets={'angry_f45' 'angry_nsM22'}; %folder names containing different stimulus sets on disk
stimset1=ceil(length(stimulusSets).*rand(1,1)); %random single face-model pick
if stimset1==1;altStimset=2;else altStimset=1;end; %in case want to run a within-subject condition contrast with alt faces

scenarioNames={{'conspaylowsim' 'conspayhighsim'} {'conspayhighsim' 'conspaylowsim'}};
r = ceil(2.*rand(1,1)); %random draw from set (1,2)
condition_set=scenarioNames{r}

tReps=30; %controls number of trials: a loop count passes through trials_list (reps of 10 trials).


%% Define and init expt'l CONDITIONS (a global struct)
global conditions
conditions=[]; %Empty any values from prior runs.
conditions.study=exptName;
conditions.ttlPoints=0;

%% Settings for subject='demo' ->shortened run for programming
if strcmp(fdata.participantID,'demo')
    demoflag=1; %can be used to switch procedures off to shorten the expt when in demo-mode
    tReps=1; %Just run through 1 repetition from trial list
end


%%%%%%%%%%%%%%%%%%%%%%%%%
%% RUN experiment. Each block coded as a separate function
%%%%%%%%%%%%%%%%%%%%%%%%%

%% INITIALIZE ENVIRONMENT
moreparams.screenNumber=0;
init_ptb(1,0,[0 0 0],moreparams); %Start PsychToolBox. flags=hidecursor,pause. Pause=0 since setting a custom "ready" screen in main_inits fn.
tune_durations %Fine-tune stimulus duration for local computer
show_ready_screen
datestr(now) %log current date, time in diary
{exptName fdata.participantID fdata.fname} %log in diary
t0=clock; %set start time of experiment

%% CODE TESTING AREA
%
%
% cleanup
% disp('Done')


%% MAIN EXPERIMENT SEQUENCE
try
    
    conditions.ttlPoints=0; %reset points
    conditions.scenario=condition_set{1}; %{}'s extract string from cell
    conditions.stimset=stimulusSets{stimset1};
    conditions %print conditions
    
    instructions('introduction')
    %     affectRating %Turn off affect ratings
    signalsTask(conditions.scenario,tReps,conditions.stimset)
    %     affectRating
    takeabreak
    
    block1pts=conditions.ttlPoints;
    conditions.ttlPoints=0; %reset points
    
    conditions.scenario=char(condition_set{2}); % Char since {} in embedded
    conditions.stimset=(stimulusSets{altStimset}); %load alternative stimset
    conditions
    
    instructions('contrast')
    %     affectRating
    signalsTask(conditions.scenario,tReps,conditions.stimset) %run alt task, same scenario
    %     affectRating
    
    conditions.ttlPoints=conditions.ttlPoints+block1pts;
    conclusion
    
catch % catch errors
    disp('Error - Experiment stopped.')
    disp('Type control-c [RETURN] cleanup [RETURN] if problems.')
    psychrethrow(psychlasterror);
    cleanup
end % try ... catch %

%% DO LAST BITS OF HOUSEKEEPING
duration=round(etime(t1,t0)/60); %elapsed time in minutes
disp(strcat(['Elasped time of study was ' num2str(duration) ' minutes.']))
disp(strcat(['Total points earned was ' num2str(conditions.ttlPoints) ' points.']))

cleanup %Diary turned off by cleanup.

%Print again here since in WIN, diary diverts disp from Command Window.
disp(strcat(['Elasped time of study was ' num2str(duration) ' minutes.']))
disp(strcat(['Total points earned was ' num2str(conditions.ttlPoints) ' points.']))

end %MAIN FN



%%%%%%%%%%%%%%%%%%%%%%%%%
%% EXPERIMENT-SPECIFIC BLOCK DEFNS
%%%%%%%%%%%%%%%%%%%%%%%%%

function tune_durations %Fine-tune stimulus durations, write tunings to infos
global conditions stimulus_list stimdir stimfolder listfolder w 
global targetStim_dur %show_stim.m will use this to replace duration in stiminfo at each trial.

set_params('practice');
stimfolder=strcat(stimdir,'practice_faces/'); %used by loadstim
stimulus_list=read_list(strcat(listfolder,'stimuli_list.txt')); %Read stimulus names & display properties (name/xfn, position, size, custom params (eg Gabor)).
[stimulus_list.wptr]=deal(w);

fprintf('%s\n %s\n','','Stimuli duration tunings:'); %display info in cmd-window, preceded by a new-line.
target_info=read_list(strcat(listfolder,'trials_list.txt'));
[target_info.wptr]=deal(w);
following_info=read_list(strcat(listfolder,'responseWindowScreen_list.txt'));
[following_info.wptr]=deal(w);

targetStim_dur=tune_stimdur(target_info,following_info); %fetch_signal.m will use this to replace duration in infos at each trial.
end

function affectRating
global stimset paramset stimdir condition stimfolder
paramset=[]; %emtpy globals for clean data logging
stimset=[]; %emtpy globals for clean data logging

stimfolder=strcat(stimdir,'affect_rating/');
condition='affectrating'
block_label='affectrating'
block_ratings('affect_rating_list.txt','keys_likert_list.txt',block_label) %will repeat trial list reps #times.
end

function instructions(blocklabel)
global stimdir stimfolder t0
stimfolder=strcat(stimdir,'instructions/',blocklabel,'/');
block_instructions(strcat('instructions_',blocklabel,'_list.txt'),'keys_navigate_list.txt','instructions');

if isequal(blocklabel,'introduction')
    t0=clock; %log start time of experiment
end

end

function signalsTask(scenario,reps,stimuli)
global condition paramset stimset stimdir stimfolder
paramset=scenario %set globals for use elsewhere
stimset=stimuli; %set globals for use elsewhere
condition='trials';
set_params(scenario)
stimfolder=strcat(stimdir,stimset,'/'); %set here for use by loadstim calls
block_trials('trials_list.txt','keys_yesno_list.txt',reps) %will repeat trial list reps #times.
end

function takeabreak
block_instructions('break_list.txt','keys_resume_list.txt','break') %eg, Study completed, Thanks! msg.
end

function conclusion
global t1
t1=clock; %get end time
block_instructions('conclusion_list.txt','keys_navigate_list.txt','conclusion') %eg, Study completed, Thanks! msg.
end

function block_ratings(mystimlist,mykeylist,block_label)% main experimental trial block.
% A block to show "rating"-type screens: 
% no need for fixation, response window, payoff that are build into block_trials
global fdata Block w listfolder stiminfo conditions
Block=block_label
set_keys(mykeylist); %install response key set
stiminfo=read_list(strcat(listfolder,mystimlist));
[stiminfo.wptr]=deal(w); %Deal w pointer into all rows of stiminfo struct (creating wptr if necc).
ntrials=length(stiminfo);
for mytrial=1:ntrials
    KbWait([],1);
    [response startRT endRT]=show_stim(stiminfo(mytrial)); %show main stim
    responsetime=round(1000*(endRT-startRT));
    [behavior responseCode]=process_response(response);
    outcome=decision_outcome(responseCode,stiminfo(mytrial));
    payoff='none'; %payoff=response_feedback(outcome); %give points, show feedback.
    
    fdata.dataout={conditions.scenario ...
        conditions.stimset ...
        Block ...
        mytrial ...
        str2double(stiminfo(mytrial).Line_Number{1}) ...
        stiminfo(mytrial).Stimulus{1} ...
        stiminfo(mytrial).Response_Code{1} ...
        behavior ...
        outcome ...
        payoff ...
        responsetime ...
        [] [] [] [] []}; %empty placeholders for unused fields.
%     fdata.dataout{1,:}
    fprintf(fdata.fptr,fdata.formatStr,fdata.dataout{1,:}); %write this trial's data to text file.
    
    waitSOA(0.100,0)
end %for each trial
end %block

function block_trials(mytriallist,mykeylist,block_repetitions)
%% Main experimental trial block.
global fdata Block soa w listfolder feedbackinfo triggerinfo
global backwardmaskinfo targetStim_dur
global stimulus_list stiminfo conditions signal_params %used by get_signal

Block='trials'
master_trialct=0; %track totoal# trials across mini-blocks.
set_keys(mykeylist); %install response key set

%Read in any needed trial components (fixations, stims, response windows, etc).
fixinfo=read_list(strcat(listfolder,'fixation_list.txt')); %Text file describes fixation as any other stimulus
[fixinfo.wptr]=deal(w);

responseWindowScreen=read_list(strcat(listfolder,'responseWindowScreen_list.txt'));
[responseWindowScreen.wptr]=deal(w);

stimulus_list=read_list(strcat(listfolder,'stimuli_list.txt')); %Read the list of target stimuli & display properties. Includes brief stim durations
[stimulus_list.wptr]=deal(w);

trialinfo_from_disk=read_list(strcat(listfolder,mytriallist)); %Read information about each trial (getsignal xfn, response-code place-holder, duration)
[trialinfo_from_disk.wptr]=deal(w); %Deal w pointer into all rows of stiminfo struct (creating wptr if necc).

feedbackinfo=read_list(strcat(listfolder,'feedback_',Block,'_list.txt')); %Details of feedback after each trial, dependent on decision outcome.
[feedbackinfo.wptr]=deal(w);

% - Here, add code to preload stims into memory as textures for speed.
% - But then need to modify calls to Screen('Close') in show_stim? and get loadstim to expect textures.
% - move "close" to end of fn that calls this fn?
% - generalize to all "stims": fixation, response screen, ratings
for b=1:block_repetitions %Loop through each TRIAL
    stiminfo=trialinfo_from_disk; %refresh stiminfo every round, since it's being modified in memory by fetchsignal
    
    if ~isempty(targetStim_dur)
        try
            [stiminfo.Stimulus_Duration]=deal(targetStim_dur); %If filled (by tuneStimdur.m) then use that for target stim's display duration
            %- this will get moved out of loop, when we create struct for trial_info?
        catch myerr
            disp('Error assigning targetStim_dur in block_trials')
            myerr
        end %try
    end %if
    
    ntrials=length(stiminfo);
    for mytrial=1:ntrials
        rwOpenTime=[];
        master_trialct=master_trialct+1;
        conditions.xtrial=mytrial; %xtrial becomes global (via conditions) and then used by the get_signal xfn over-write trialinfo with correct stimulus details.
        KbWait([], 1); %wait for no key presses
        
        waitSOA(soa,1); %wait variable SOA
        show_stim(fixinfo(1)); %show fixation cross
        
        [response startRT endRT]=show_stim(stiminfo(mytrial)); %show main stim
        
        if isequal(response,'null')
            %- could implement an RT check here
            [response rwOpenTime endRT]=show_stim(responseWindowScreen(1)); %end stim pres with response window
        else
            Screen('Flip',stiminfo(mytrial).wptr); %end stim pres with flip to blank. 
        end
        
        %Process response
        responsetime=round(1000*(endRT-startRT));
        [behavior responseCode]=process_response(response);
        outcome=decision_outcome(responseCode,stiminfo(mytrial));

        %Deliver payoff
        payoff=response_feedback(outcome);
        points=signal_params.(payoff); %Return Value of Parmeter indexed by payoff.
        conditions.ttlPoints=conditions.ttlPoints+points; %Note: number+NaN=NaN, so can't use NaN as empty point value, use 0 instead.
        feedbackID=strmatch(outcome,[feedbackinfo.Response_Code],'exact'); %Suss feedback screen layout for given outcome for use in show_stim_trigger.        
        [nullresponse payoff_screen_onset nullendRT]=show_stim(feedbackinfo(feedbackID));
        Screen('flip',stiminfo(mytrial).wptr); %flip to blank screen to end payoff window, prior to SOA for next trial.

        %Determine stimulus durtion, accounting for any processes intervening between flips (eg, payoff preparations). 
        if isempty(rwOpenTime)
            actual_stimdur=payoff_screen_onset-startRT;
        else
            actual_stimdur=rwOpenTime-startRT;
        end
        
        fdata.dataout={fdata.participantID ...
            conditions.study ...
            conditions.scenario ...
            conditions.stimset ...
            Block ...
            master_trialct ...
            str2double(stimulus_list(conditions.stimID).Line_Number{1}) ...
            stiminfo(mytrial).Stimulus{1} ...
            stiminfo(mytrial).Response_Code{1} ...
            behavior ...
            outcome ...
            payoff ...
            responsetime ...
            conditions.ttlPoints ...
            actual_stimdur};
        fprintf(fdata.fptr,fdata.formatStr,fdata.dataout{1,:}); %write this trial's data to text file.
    end %for each trial
end %for each block rept
end %block

function block_instructions(mystimlist,mykeylist,blocklabel) %main instructions, repeated with customization for each condition
%can probably incorporate this into a new callblock with block_trials, some old flags
global w stiminfo listfolder Block

%Set up basic BLOCK parameters
Block=blocklabel
stiminfo=read_list(strcat(listfolder,mystimlist)); %flag=1:randomize trial order
[stiminfo.wptr]=deal(w); %Deal w pointer into all rows of stiminfo struct (creating wptr if necc).
ntrials=length(stiminfo);
set_keys(mykeylist); %install response key set

%Navigate through each TRIAL
trial=1;
while trial<=ntrials
    KbWait([], 1);
    [response]=show_stim(stiminfo(trial));
    [behavior response]=process_response(response);
    if strcmp(response,'forward')
        trial=trial+1; %forward key pressed
    else if (strcmp(response,'backward') && trial>1)
            trial=trial-1; %backward key pressed
            %    else %no prior screen to go back to; do nothing
        end %else if backward
    end %if forward
    
    if trial>1
        mytrial=trial-1; %since will be off by +1 for lookups in stim list.
    else
        mytrial=trial; %User pressed "back" button at first screen (trial=1; nowhere to go back to).
    end
end %trials
end %block

function show_ready_screen
global w posresponse negresponse
%% Put key-label instructions & READY  on screen
line1=70;
nextline=30;
Screen('TextSize', w, 24);
Screen('TextFont',w, 'Arial');
Screen('DrawText', w, 'Ready.', 10, line1, 255);
if posresponse==KbName('/?')
    Screen('DrawText', w, 'Put the "Yes" label on the "/?" key', 10, (line1+2*nextline), 255);
    Screen('DrawText', w, 'Put the "No" label on the "z" key', 10, (line1+3*nextline), 255);
elseif posresponse==KbName('z')
    Screen('DrawText', w, 'Put the "Yes" label on the "z" key', 10, (line1+2*nextline), 255);
    Screen('DrawText', w, 'Put the "No" label on the "/?" key', 10, (line1+3*nextline), 255);
else
    error('Error assinging response keys in main_inits')
    cleanup
end
Screen('DrawText', w, 'Press space-bar to view instructions & begin.', 10, (line1+5*nextline), 255);
Screen('Flip', w); %show text

%% Wait for user response
[KeyIsDown, endrt, KeyCode]=KbCheck;
while KeyCode(KbName('space'))==0 % loop until valid key is pressed
    [KeyIsDown, endrt, KeyCode]=KbCheck; %check for key presses
    WaitSecs(0.001); % Wait 1 ms before checking the keyboard again to prevent overload of the machine at elevated Priority()
end %while key not pressed
Screen('Flip', w); %show empty screen
WaitSecs(0.100); % aesthentic pause before starting
end

